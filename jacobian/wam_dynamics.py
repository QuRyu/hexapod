''' 
Lab 2: Dynamics 
CS442 Spring 2018 
Qingbo Liu
'''
import sys 
import numpy as np 
from math import radians, sin, cos, sqrt


def jacobian(thetas):
    # compute the Jacobian matrix given three angles 

    theta1 = thetas[0]
    theta2 = thetas[1]
    theta5 = thetas[2] 

    jacobian = np.array([ [-55*sin(theta2)*sin(theta1) - 30*sin(theta2+theta5)*sin(theta1) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2+theta5), 
                                55*cos(theta1)*cos(theta2) + 30*cos(theta2+theta5)*cos(theta1) - 4.5*cos(theta1)*sin(theta2) + 4.5*cos(theta1)*sin(theta2+theta5), 
                                30*cos(theta2+theta5) + 4.5*cos(theta1)*sin(theta2+theta5)], # first row 
                        [55*cos(theta1)*sin(theta2) + 30*cos(theta1)*sin(theta2+theta5) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2+theta5),
                                55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2+theta5) - 4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2+theta5),
                                30*sin(theta1)*cos(theta2+theta5) + 4.5*sin(theta1)*sin(theta2+theta5)], # second row 
                        [0, -4.5*cos(theta2) + 4.5*cos(theta2+theta5) - 55*sin(theta2) - 30*sin(theta2+theta5), 
                                4.5*cos(theta2+theta5) - 30*sin(theta2+theta5)]
                       ])

    return jacobian

def jacobian_inverse(thetas):
    # compute the inverse of the Jacobian matrix given angles 

    theta1 = thetas[0]
    theta2 = thetas[1]
    theta5 = thetas[2] 


    # don't look at this crazy inverse matrix !!! 
    return np.array([[((-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5)))*(-55*sin(theta2)*cos(theta1) - 30*sin(theta2 + theta5)*cos(theta1) - 4.5*cos(theta1)*cos(theta2) + 4.5*cos(theta1)*cos(theta2 + theta5))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + (-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))*((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-55*sin(theta2)*cos(theta1) - 30*sin(theta2 + theta5)*cos(theta1) - 4.5*cos(theta1)*cos(theta2) + 4.5*cos(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5))))/((-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))*((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))),
                       ((-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5)))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) - (-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5)))/((-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))*((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))),
                       -(-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5)))/((-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)))],
                       [((-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))*(-55*sin(theta2)*cos(theta1) - 30*sin(theta2 + theta5)*cos(theta1) - 4.5*cos(theta1)*cos(theta2) + 4.5*cos(theta1)*cos(theta2 + theta5)) + ((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2)*cos(theta1) - 30*sin(theta2 + theta5)*cos(theta1) - 4.5*cos(theta1)*cos(theta2) + 4.5*cos(theta1)*cos(theta2 + theta5))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)))/((-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))*((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))),
                        ((-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) + ((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)))/((-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))*((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))),
                        -((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))/(-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))],
                       [-(-55*sin(theta2)*cos(theta1) - 30*sin(theta2 + theta5)*cos(theta1) - 4.5*cos(theta1)*cos(theta2) + 4.5*cos(theta1)*cos(theta2 + theta5))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5))/(-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5))),
                        -(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5))/(-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5))),
                        ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))/(-((4.5*sin(theta1)*sin(theta2 + theta5) + 30*sin(theta1)*cos(theta2 + theta5))*(-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5)) - (4.5*sin(theta2 + theta5)*cos(theta1) + 30*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-55*sin(theta2) - 30*sin(theta2 + theta5) - 4.5*cos(theta2) + 4.5*cos(theta2 + theta5)) + ((-55*sin(theta1)*sin(theta2) - 30*sin(theta1)*sin(theta2 + theta5) - 4.5*sin(theta1)*cos(theta2) + 4.5*sin(theta1)*cos(theta2 + theta5))*(-4.5*sin(theta1)*sin(theta2) + 4.5*sin(theta1)*sin(theta2 + theta5) + 55*sin(theta1)*cos(theta2) + 30*sin(theta1)*cos(theta2 + theta5)) - (-4.5*sin(theta2)*cos(theta1) + 4.5*sin(theta2 + theta5)*cos(theta1) + 55*cos(theta1)*cos(theta2) + 30*cos(theta1)*cos(theta2 + theta5))*(55*sin(theta2)*cos(theta1) + 30*sin(theta2 + theta5)*cos(theta1) + 4.5*cos(theta1)*cos(theta2) - 4.5*cos(theta1)*cos(theta2 + theta5)))*(-30*sin(theta2 + theta5) + 4.5*cos(theta2 + theta5)))]])
    


def main(argv):

    # convert the parameters 
    thetas = list(map(radians, map(float, argv[1:4])))
    forces = list(map(float, (argv[4:7])))

    force_m = np.array([ [forces[0]], [forces[1]], [forces[2]] ])

    # print the Jacobian matrix and determinant 
    jacobian_m = jacobian(thetas)
    print("Jacobian matrix: \n", jacobian_m, "\n")
    print("   determinant = ", np.linalg.det(jacobian_m), "\n")

    # print the torques given the force from user
    torques = jacobian_inverse(thetas) @ force_m
    print("Joint torques:")
    print("    tau1 = {} N-cm".format(torques[0, 0]))
    print("    tau2 = {} N-cm".format(torques[1, 0]))
    print("    tau5 = {} N-cm".format(torques[2, 0]))

    # print the force given the torques 
    actual_forces = jacobian_m @ torques
    print("\nEnd Effector Force (in the base frame):") 
    print("    Fx = {} N".format(actual_forces[0, 0]))
    print("    Fy = {} N".format(actual_forces[1, 0]))
    print("    Fz = {} N".format(actual_forces[2, 0]))

    # estimate the error between the target force and force computed from this system 
    error = sqrt( (actual_forces[0,0]-forces[0])**2 + (actual_forces[1,0]-forces[1])**2 + (actual_forces[2,0]-forces[2])**2 )
    print("\nError: ", error)
        

if __name__ == "__main__":
    main(sys.argv) 



